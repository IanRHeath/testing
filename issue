An unexpected error occurred: Error code: 404 - {'statusCode': 404, 'message': 'Resource not found'}
Please try rephrasing your request or contact support if the issue persists.

program_map = {
    "STX": "Strix1 [PRG-000384]",
    "STXH": "Strix Halo [PRG-000391]",
    "GNR": "Granite Ridge [PRG-000279]",
    "KRK": "Krackan1 [PRG-000388]",
    "KRK2E": "Krackan2e [PRG-000376]",
    "SHP": "Shimada Peak HEDT [PRG-000326]",
    "FRG": "Fire Range [PRG-000394]",
    "BRC": "Barcelo",
    "CPK": "Castle Peak",
    "CZN": "Cezanne",
    "HPT1": "Hawpoint 1",
    "HPT2": "Hawkpoint 2",
    "MDS1": "Medusa 1",
    "MDN": "Mendocino",
    "OLR": "Olympic Ridge",
    "PHX": "Phoenix",
    "RPL": "Raphael",
    "RMB": "Rembrandt",
    "RN": "Renoir",
    "VMR": "Vermeer"

}

priority_map = {
    "P1": "P1 (Gating)",
    "P2": "P2 (Must Solve)",
    "P3": "P3 (Solution Desired)",
    "P4": "P4 (No Impact/Notify)"
}

project_map = {
    "PLAT": "PLAT"
}

def extract_params(prompt: str) -> dict:
    system = "Extract intent (list/count/detail), priority, program, project, maxResults, order from prompt as JSON only."
    example = '{"intent":"list","priority":"P2","program":"STXH","project":"PLAT","maxResults":5,"order":"ASC"}'
    resp = client.chat.completions.create(
        model=chat_dep,
        messages=[
            {"role": "system", "content": system},
            {"role": "user", "content": f"Example: {example}\nInput: {prompt}"}
        ],
        max_tokens=64
    )
    return json.loads(resp.choices[0].message.content)

def build_jql(params: dict) -> str:
    # Normalize priority
    raw_prio = params.get("priority", "").strip()
    if raw_prio.upper() in priority_map:
        full_priority = priority_map[raw_prio.upper()]
    elif raw_prio in priority_map.values():
        full_priority = raw_prio
    else:
        raise ValueError(f"Invalid priority '{raw_prio}'. Must be one of {list(priority_map.values())}.")

    # Normalize program
    raw_prog = params.get("program", "").strip().upper()
    if raw_prog in program_map:
        full_program = program_map[raw_prog]
    elif raw_prog in program_map.values():
        full_program = raw_prog
    else:
        raise ValueError(f"Invalid program '{raw_prog}'. Must be one of {list(program_map.keys())}.")

    jql = f"priority = \"{full_priority}\" AND program = '{full_program}'"

    # Normalize project 
    raw_proj = params.get("project", "").strip().upper()
    if raw_proj:
        if raw_proj in project_map:
            jql += f" AND project = '{project_map[raw_proj]}'"
        else:
            raise ValueError(f"Invalid project '{raw_proj}'. Must be one of {list(project_map.keys())}.")

    if params.get("order"):
        jql += f" ORDER BY createdDate {params['order']}"

    return jql
